<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FBD Links - Admin Panel</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            padding: 40px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            color: #ecf0f1;
        }
        h2 {
            color: #3498db;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
            margin-top: 30px;
        }
        .form-group {
            margin: 20px 0;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #ecf0f1;
        }
        input[type="url"], input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 16px;
            box-sizing: border-box;
        }
        input[type="url"]:focus, input[type="text"]:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255, 255, 255, 0.15);
        }
        input[type="url"]::placeholder, input[type="text"]::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        .button-group {
            display: flex;
            gap: 15px;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        button {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
        }
        .btn-primary {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
        }
        .btn-secondary {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            color: white;
        }
        .btn-danger {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
        }
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .status {
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: center;
            font-weight: bold;
            display: none;
        }
        .status.success {
            background: rgba(46, 204, 113, 0.3);
            border: 1px solid rgba(46, 204, 113, 0.5);
            color: #2ecc71;
        }
        .status.error {
            background: rgba(231, 76, 60, 0.3);
            border: 1px solid rgba(231, 76, 60, 0.5);
            color: #e74c3c;
        }
        .current-config {
            background: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            word-break: break-all;
        }
        .navigation {
            text-align: center;
            margin-bottom: 20px;
        }
        .navigation a {
            color: #3498db;
            text-decoration: none;
            margin: 0 15px;
            padding: 8px 16px;
            border: 1px solid #3498db;
            border-radius: 5px;
            transition: all 0.3s ease;
        }
        .navigation a:hover {
            background: #3498db;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="navigation">
            <a href="/">‚Üê Back to Home</a>
            <a href="/api/visitors">View Visitors</a>
            <a href="/api/status">API Status</a>
        </div>
        
        <h1>üîß Admin Panel</h1>
        
        <div id="status"></div>
        
        <h2>üè∑Ô∏è Provider Code Configuration</h2>
        
        <div class="current-config">
            <strong>Current Provider Code:</strong><br>
            <code id="currentProviderCode"><%= config.providerCode %></code>
        </div>
        
        <form id="providerForm">
            <div class="form-group">
                <label for="providerCode">Provider Code:</label>
                <input 
                    type="text" 
                    id="providerCode" 
                    name="providerCode" 
                    value="<%= config.providerCode %>"
                    placeholder="Enter provider code (e.g., PROV001)"
                    required
                >
                <small style="color: rgba(255,255,255,0.7); margin-top: 5px; display: block;">
                    This code will be used for all visit recordings (web, iOS, Android) instead of random codes.
                </small>
            </div>
            
            <div class="button-group">
                <button type="submit" class="btn-primary">üíæ Update Provider Code</button>
                <button type="button" onclick="resetProviderToDefault()" class="btn-danger">üîÑ Reset Provider Code</button>
            </div>
        </form>
    </div>

    <script>
        // Show status message
        function showStatus(message, type) {
            const statusEl = document.getElementById('status');
            statusEl.innerHTML = message;
            statusEl.className = 'status ' + type;
            statusEl.style.display = 'block';
            
            // Hide after 5 seconds
            setTimeout(() => {
                statusEl.style.display = 'none';
            }, 5000);
        }

        // Test URL
        function testUrl() {
            const url = document.getElementById('playstoreUrl').value;
            if (url) {
                window.open(url, '_blank');
            } else {
                showStatus('‚ö†Ô∏è Please enter a URL to test', 'error');
            }
        }

        // Handle provider form submission
        document.getElementById('providerForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const providerCode = formData.get('providerCode');
            
            try {
                const response = await fetch('/admin/config/provider', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ providerCode: providerCode })
                });

                const result = await response.json();
                
                if (response.ok) {
                    showStatus('‚úÖ Provider code updated successfully!', 'success');
                    document.getElementById('currentProviderCode').textContent = providerCode;
                } else {
                    showStatus('‚ùå Error: ' + result.message, 'error');
                }
            } catch (error) {
                showStatus('‚ùå Network error: ' + error.message, 'error');
            }
        });

        // Reset provider code to default
        async function resetProviderToDefault() {
            if (!confirm('Are you sure you want to reset the provider code to default?')) {
                return;
            }
            
            try {
                const response = await fetch('/admin/config/provider/reset', {
                    method: 'POST'
                });

                const result = await response.json();
                
                if (response.ok) {
                    showStatus('‚úÖ Provider code reset to default!', 'success');
                    document.getElementById('providerCode').value = result.providerCode;
                    document.getElementById('currentProviderCode').textContent = result.providerCode;
                } else {
                    showStatus('‚ùå Error: ' + result.message, 'error');
                }
            } catch (error) {
                showStatus('‚ùå Network error: ' + error.message, 'error');
            }
        }
    </script>
</body>
</html>
